# Proof-Transport

[![CI](https://github.com/sequentlabs/proof-transport/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/sequentlabs/proof-transport/actions/workflows/ci.yml)
[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/sequentlabs/proof-transport/blob/main/LICENSE)
[![Live Demo](https://img.shields.io/badge/demo-online-green)](https://sequentlabs.github.io/proof-transport/)


**Proof-Transport**: keep proofs valid when the proof kernel changes.  
Automatically transport sequent proofs across rule-set updates (e.g., remove `Cut`) and emit stability certificates.

---

## 🔗 Links
- 📄 [Project board](https://github.com/sequentlabs/proof-transport/projects)  
- 🌍 [Live demo explorer](https://sequentlabs.github.io/proof-transport/)  
- ✅ [Latest CI run](https://github.com/sequentlabs/proof-transport/actions)

---

## ✅ What CI checks
- Rust crate builds successfully  
- JSON examples are schema-valid  
- BEFORE proofs contain a `Cut`  
- AFTER proofs have no `Cut`  
- Node count decreases (fragility drop)

---

## 🖼️ Demo Screenshot
![Demo screenshot](docs/img/proof_demo.png)

---

## ⚡ Quickstart
```bash
cargo build --release
./target/release/tesl version


---

## 🤝 Partners & Early Adopters
- Discussions with Lean/Coq devs about testing Proof-Transport exporters  
- Applied crypto teams have expressed interest in resilient audit proofs  
- Academic collaborators intend to trial Proof-Transport in verification workflows  

> “We plan to trial Proof-Transport to preserve proofs across kernel changes.” — mark@mazlo.io

